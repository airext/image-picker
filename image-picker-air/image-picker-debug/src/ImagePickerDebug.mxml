<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" initialize="trace(123)">

    <fx:Script>
        <![CDATA[
        import com.github.airext.ImagePicker;
        import com.github.airext.data.Asset;
        import com.github.airext.data.AssetInput;
        import com.github.airext.data.ImagePickerBrowseOptions;
        import com.github.airext.events.ImagePickerEvent;

        import flash.filesystem.FileStream;

        import mx.events.ModuleEvent;

        import spark.components.Alert;

        //----------------------------------------------------------------------
        //
        //  Variables
        //
        //----------------------------------------------------------------------

        [Bindable]
        private var asset:Asset;

        [Bindable]
        private var input:AssetInput;

        [Bindable]
        private var inputOpened:Boolean;

        [Bindable]
        private var bytes:ByteArray;

        [Bindable]
        private var logs:String = "";

        //----------------------------------------------------------------------
        //
        //  Methods
        //
        //----------------------------------------------------------------------

        private function log(...rest):void
        {
            logs += rest.join(" ") + "\n";

            trace.apply(null, rest);
        }

        //----------------------------------------------------------------------
        //
        //  Event handlers
        //
        //----------------------------------------------------------------------

        //-----------------------------------
        //  Event handlers: isSupported button
        //-----------------------------------

        private function isSupported_clickHandler(event:MouseEvent):void
        {
            log("ImagePicker.isSupported()", ImagePicker.isSupported());

            Alert.show(String(ImagePicker.isSupported()));
        }

        //-----------------------------------
        //  Event handlers: show button
        //-----------------------------------

        private function show_clickHandler(event:MouseEvent):void
        {
            var scale:Number = runtimeDPI >= 320 ? 2 : 1;

            var bounds:Rectangle = showButton.getBounds(stage);

            var options:ImagePickerBrowseOptions = new ImagePickerBrowseOptions();
            options.video = false;
            options.image = true;
            options.origin = new Rectangle(bounds.x / scale, bounds.y / scale, bounds.width / scale, bounds.height / scale);

            ImagePicker.sharedInstance().addEventListener(ImagePickerEvent.SELECT, selectHandler);
            ImagePicker.sharedInstance().addEventListener(ErrorEvent.ERROR, errorHandler);
            ImagePicker.sharedInstance().addEventListener(ImagePickerEvent.CANCEL, cancelHandler);
            ImagePicker.sharedInstance().addEventListener(StatusEvent.STATUS, statusHandler);

            ImagePicker.sharedInstance().browse(options);
        }

        //-----------------------------------
        //  Event handlers: Read button
        //-----------------------------------

        private function read_clickHandler(event:MouseEvent):void
        {
            log("Bytes Available: ", input.bytesAvailable);

            var bytes:ByteArray = new ByteArray();

            input.readBytes(bytes);

            log("Bytes read: ", bytes.length);

            this.bytes = bytes.length > 0 ? bytes : null;
        }

        //-----------------------------------
        //  Event handlers: Open button
        //-----------------------------------

        private function open_clickHandler(event:MouseEvent):void
        {
            if (input != null)
            {
                input.removeEventListener(StatusEvent.STATUS, input_statusHandler);
                input.removeEventListener(Event.OPEN, input_openHandler);
            }

            inputOpened = false;

            asset.close();

            input = asset.open();

            input.addEventListener(Event.OPEN, input_openHandler);
        }

        //-----------------------------------
        //  Event handlers: ImagePicker
        //-----------------------------------

        private function selectHandler(event:ImagePickerEvent):void
        {
            log(event.asset);
            log(event.asset.name);
            log(event.asset.type);
            log(event.asset.url);

            this.asset = event.asset as Asset;
        }

        private function errorHandler(event:ErrorEvent):void
        {
            Alert.show(event.toString());
        }

        private function cancelHandler(event:ImagePickerEvent):void
        {
            log("cancel");
        }

        private function statusHandler(event:StatusEvent):void
        {
            switch (event.code)
            {
                case "ImagePicker.Log" :

                        log("ImagePicker:", event.level);

                    break;
            }
        }

        //-----------------------------------
        //  Event handlers: AssetInput
        //-----------------------------------

        private function input_statusHandler(event:StatusEvent):void
        {
            log("StatusEvent.code:", event.code);
        }

        private function input_openHandler(event:Event):void
        {
            input.removeEventListener(Event.OPEN, input_openHandler);

            input.addEventListener(StatusEvent.STATUS, input_statusHandler);

            inputOpened = true;
        }

        ]]>
    </fx:Script>

    <s:layout>
        <s:VerticalLayout horizontalAlign="center" />
    </s:layout>

    <s:Button label="Is Supported" click="isSupported_clickHandler(event)" />

    <s:Button id="showButton" label="Show" click="show_clickHandler(event)" />

    <s:Button label="CameraRoll" click="(new CameraRoll()).browseForImage();" />

    <s:Button label="Open" enabled="{asset}" click="open_clickHandler(event)" />

    <s:Button label="Read" enabled="{input}" click="read_clickHandler(event)" />

    <s:Label text="{asset.name}" />

    <s:Image source="{bytes}" />

    <s:TextArea width="100%" text="{logs}" height="300">

    </s:TextArea>

</s:Application>
